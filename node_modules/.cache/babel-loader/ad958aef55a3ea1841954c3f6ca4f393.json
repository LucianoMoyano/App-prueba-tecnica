{"ast":null,"code":"import { LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT, REMOVE_ERROR_ALERT, USER_LOGGED } from \"./actionTypes\";\nimport { MD5, encodeURIBody } from \"../../utils\";\nimport { getData } from \"./main\"; // User Is Logged\n\nexport const userIsLogged = () => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGGED\n    });\n  } catch (err) {// dispatch({\n    //   type: AUTH_ERROR,\n    // })\n  }\n}; // Login\n\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    user: email,\n    pass: MD5(password),\n    device: \"Web\"\n  };\n  const URL = \"https://dev.perseo.tv/ws/Login.php\";\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\n    },\n    body: encodeURIBody(body)\n  };\n\n  try {\n    const response = await fetch(URL, options);\n    const auth = await response.json(); // error de la api\n\n    if (auth.error !== true && auth.token) {\n      dispatch(loginSuccess(auth));\n      localStorage.setItem(\"tokenPerseo\", auth.token);\n      dispatch(userIsLogged());\n      dispatch(getData(auth.token));\n    } else {\n      dispatch(loginFail(auth));\n      localStorage.removeItem(\"tokenPerseo\");\n    }\n  } catch (err) {\n    console.log(err); // manejar error de respuesta\n    // dispatch(loginFail(err))\n  }\n};\n\nconst loginSuccess = auth => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: auth\n  };\n};\n\nconst loginFail = auth => {\n  return {\n    type: LOGIN_FAIL,\n    payload: auth\n  };\n};\n\nexport const removeAlertError = () => {\n  return {\n    type: REMOVE_ERROR_ALERT\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem(\"tokenPerseo\");\n  return dispatch => {\n    dispatch({\n      type: LOGOUT\n    });\n  };\n};","map":{"version":3,"sources":["/home/lucianomoyano/Escritorio/prueba-tecnica-react/src/redux/actions/auth.js"],"names":["LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","REMOVE_ERROR_ALERT","USER_LOGGED","MD5","encodeURIBody","getData","userIsLogged","dispatch","type","err","login","email","password","body","user","pass","device","URL","options","method","headers","response","fetch","auth","json","error","token","loginSuccess","localStorage","setItem","loginFail","removeItem","console","log","payload","removeAlertError","logout"],"mappings":"AAAA,SACEA,UADF,EAEEC,aAFF,EAGEC,MAHF,EAIEC,kBAJF,EAKEC,WALF,QAMO,eANP;AAOA,SAASC,GAAT,EAAcC,aAAd,QAAmC,aAAnC;AACA,SAASC,OAAT,QAAwB,QAAxB,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACpD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;AAGD,GAJD,CAIE,OAAOO,GAAP,EAAY,CACZ;AACA;AACA;AACD;AACF,CAVM,C,CAYP;;AACA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOL,QAAP,IAAoB;AAC5D,QAAMM,IAAI,GAAG;AACXC,IAAAA,IAAI,EAAEH,KADK;AAEXI,IAAAA,IAAI,EAAEZ,GAAG,CAACS,QAAD,CAFE;AAGXI,IAAAA,MAAM,EAAE;AAHG,GAAb;AAMA,QAAMC,GAAG,GAAG,oCAAZ;AAEA,QAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFK;AAKdP,IAAAA,IAAI,EAAET,aAAa,CAACS,IAAD;AALL,GAAhB;;AAQA,MAAI;AACF,UAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAMC,OAAN,CAA5B;AACA,UAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAFE,CAIF;;AACA,QAAID,IAAI,CAACE,KAAL,KAAe,IAAf,IAAuBF,IAAI,CAACG,KAAhC,EAAuC;AACrCnB,MAAAA,QAAQ,CAACoB,YAAY,CAACJ,IAAD,CAAb,CAAR;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCN,IAAI,CAACG,KAAzC;AACAnB,MAAAA,QAAQ,CAACD,YAAY,EAAb,CAAR;AACAC,MAAAA,QAAQ,CAACF,OAAO,CAACkB,IAAI,CAACG,KAAN,CAAR,CAAR;AACD,KALD,MAKO;AACLnB,MAAAA,QAAQ,CAACuB,SAAS,CAACP,IAAD,CAAV,CAAR;AACAK,MAAAA,YAAY,CAACG,UAAb,CAAwB,aAAxB;AACD;AACF,GAdD,CAcE,OAAOtB,GAAP,EAAY;AACZuB,IAAAA,OAAO,CAACC,GAAR,CAAYxB,GAAZ,EADY,CAEZ;AACA;AACD;AACF,CApCM;;AAsCP,MAAMkB,YAAY,GAAIJ,IAAD,IAAU;AAC7B,SAAO;AACLf,IAAAA,IAAI,EAAET,aADD;AAELmC,IAAAA,OAAO,EAAEX;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMO,SAAS,GAAIP,IAAD,IAAU;AAC1B,SAAO;AACLf,IAAAA,IAAI,EAAEV,UADD;AAELoC,IAAAA,OAAO,EAAEX;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,MAAMY,gBAAgB,GAAG,MAAM;AACpC,SAAO;AACL3B,IAAAA,IAAI,EAAEP;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMmC,MAAM,GAAG,MAAM;AAC1BR,EAAAA,YAAY,CAACG,UAAb,CAAwB,aAAxB;AACA,SAAQxB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER;AADC,KAAD,CAAR;AAGD,GAJD;AAKD,CAPM","sourcesContent":["import {\n  LOGIN_FAIL,\n  LOGIN_SUCCESS,\n  LOGOUT,\n  REMOVE_ERROR_ALERT,\n  USER_LOGGED,\n} from \"./actionTypes\"\nimport { MD5, encodeURIBody } from \"../../utils\"\nimport { getData } from \"./main\"\n\n// User Is Logged\nexport const userIsLogged = () => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGGED,\n    })\n  } catch (err) {\n    // dispatch({\n    //   type: AUTH_ERROR,\n    // })\n  }\n}\n\n// Login\nexport const login = (email, password) => async (dispatch) => {\n  const body = {\n    user: email,\n    pass: MD5(password),\n    device: \"Web\",\n  }\n\n  const URL = \"https://dev.perseo.tv/ws/Login.php\"\n\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n    },\n    body: encodeURIBody(body),\n  }\n\n  try {\n    const response = await fetch(URL, options)\n    const auth = await response.json()\n\n    // error de la api\n    if (auth.error !== true && auth.token) {\n      dispatch(loginSuccess(auth))\n      localStorage.setItem(\"tokenPerseo\", auth.token)\n      dispatch(userIsLogged())\n      dispatch(getData(auth.token))\n    } else {\n      dispatch(loginFail(auth))\n      localStorage.removeItem(\"tokenPerseo\")\n    }\n  } catch (err) {\n    console.log(err)\n    // manejar error de respuesta\n    // dispatch(loginFail(err))\n  }\n}\n\nconst loginSuccess = (auth) => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: auth,\n  }\n}\n\nconst loginFail = (auth) => {\n  return {\n    type: LOGIN_FAIL,\n    payload: auth,\n  }\n}\n\nexport const removeAlertError = () => {\n  return {\n    type: REMOVE_ERROR_ALERT,\n  }\n}\n\nexport const logout = () => {\n  localStorage.removeItem(\"tokenPerseo\")\n  return (dispatch) => {\n    dispatch({\n      type: LOGOUT,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}