{"ast":null,"code":"import { encodeURIBody } from \"../../utils\";\nimport { GET_DATA, GET_FAVS_FILMS, SEARCH_FILMS } from \"./actionTypes\"; // Data de la API\n\nexport const getData = token => async dispatch => {\n  const body = {\n    token: token,\n    device: \"Web\"\n  };\n  const URL = \"https://dev.perseo.tv/ws/GetView.php\";\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\n    },\n    body: encodeURIBody(body)\n  };\n\n  try {\n    const response = await fetch(URL, options);\n    const data = await response.json();\n    dispatch({\n      type: GET_DATA,\n      payload: data\n    });\n    dispatch(getFavsFilms(data, data.user.favs));\n  } catch (error) {\n    console.log(error);\n  }\n}; // favoritos\n\nexport const getFavsFilms = (data, favs) => {\n  let favoriteFilms = data.contents.filter(item => favs.includes(item.id));\n  return {\n    type: GET_FAVS_FILMS,\n    payload: favoriteFilms\n  };\n}; // busqueda\n\nexport const searchFilms = (value, data) => dispatch => {\n  let searchValue = value.toLowerCase();\n  console.log(\"data\", data.contents);\n  let searchFilms = data.contents.filter(item => {\n    let formattedTitle = item.title.toLowerCase();\n    return formattedTitle.indexOf(searchValue) > -1;\n  });\n  console.log(\"peliculas buscadas\", searchFilms);\n  dispatch({\n    type: SEARCH_FILMS,\n    payload: searchFilms\n  });\n};","map":{"version":3,"sources":["/home/lucianomoyano/Escritorio/prueba-tecnica-react/src/redux/actions/main.js"],"names":["encodeURIBody","GET_DATA","GET_FAVS_FILMS","SEARCH_FILMS","getData","token","dispatch","body","device","URL","options","method","headers","response","fetch","data","json","type","payload","getFavsFilms","user","favs","error","console","log","favoriteFilms","contents","filter","item","includes","id","searchFilms","value","searchValue","toLowerCase","formattedTitle","title","indexOf"],"mappings":"AAAA,SAASA,aAAT,QAA8B,aAA9B;AACA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,YAAnC,QAAuD,eAAvD,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAIC,KAAD,IAAW,MAAOC,QAAP,IAAoB;AACpD,QAAMC,IAAI,GAAG;AACXF,IAAAA,KAAK,EAAEA,KADI;AAEXG,IAAAA,MAAM,EAAE;AAFG,GAAb;AAKA,QAAMC,GAAG,GAAG,sCAAZ;AAEA,QAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFK;AAKdL,IAAAA,IAAI,EAAEP,aAAa,CAACO,IAAD;AALL,GAAhB;;AAOA,MAAI;AACF,UAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAMC,OAAN,CAA5B;AACA,UAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAV,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAEhB,QADC;AAEPiB,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAKAT,IAAAA,QAAQ,CAACa,YAAY,CAACJ,IAAD,EAAOA,IAAI,CAACK,IAAL,CAAUC,IAAjB,CAAb,CAAR;AACD,GAVD,CAUE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CA5BM,C,CA8BP;;AACA,OAAO,MAAMH,YAAY,GAAG,CAACJ,IAAD,EAAOM,IAAP,KAAgB;AAC1C,MAAII,aAAa,GAAGV,IAAI,CAACW,QAAL,CAAcC,MAAd,CAAsBC,IAAD,IAAUP,IAAI,CAACQ,QAAL,CAAcD,IAAI,CAACE,EAAnB,CAA/B,CAApB;AAEA,SAAO;AACLb,IAAAA,IAAI,EAAEf,cADD;AAELgB,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CAPM,C,CASP;;AACA,OAAO,MAAMM,WAAW,GAAG,CAACC,KAAD,EAAQjB,IAAR,KAAkBT,QAAD,IAAc;AACxD,MAAI2B,WAAW,GAAGD,KAAK,CAACE,WAAN,EAAlB;AAEAX,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBT,IAAI,CAACW,QAAzB;AAEA,MAAIK,WAAW,GAAGhB,IAAI,CAACW,QAAL,CAAcC,MAAd,CAAsBC,IAAD,IAAU;AAC/C,QAAIO,cAAc,GAAGP,IAAI,CAACQ,KAAL,CAAWF,WAAX,EAArB;AACA,WAAOC,cAAc,CAACE,OAAf,CAAuBJ,WAAvB,IAAsC,CAAC,CAA9C;AACD,GAHiB,CAAlB;AAIAV,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCO,WAAlC;AACAzB,EAAAA,QAAQ,CAAC;AACPW,IAAAA,IAAI,EAAEd,YADC;AAEPe,IAAAA,OAAO,EAAEa;AAFF,GAAD,CAAR;AAID,CAdM","sourcesContent":["import { encodeURIBody } from \"../../utils\"\nimport { GET_DATA, GET_FAVS_FILMS, SEARCH_FILMS } from \"./actionTypes\"\n\n// Data de la API\nexport const getData = (token) => async (dispatch) => {\n  const body = {\n    token: token,\n    device: \"Web\",\n  }\n\n  const URL = \"https://dev.perseo.tv/ws/GetView.php\"\n\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n    },\n    body: encodeURIBody(body),\n  }\n  try {\n    const response = await fetch(URL, options)\n    const data = await response.json()\n\n    dispatch({\n      type: GET_DATA,\n      payload: data,\n    })\n\n    dispatch(getFavsFilms(data, data.user.favs))\n  } catch (error) {\n    console.log(error)\n  }\n}\n\n// favoritos\nexport const getFavsFilms = (data, favs) => {\n  let favoriteFilms = data.contents.filter((item) => favs.includes(item.id))\n\n  return {\n    type: GET_FAVS_FILMS,\n    payload: favoriteFilms,\n  }\n}\n\n// busqueda\nexport const searchFilms = (value, data) => (dispatch) => {\n  let searchValue = value.toLowerCase()\n\n  console.log(\"data\", data.contents)\n\n  let searchFilms = data.contents.filter((item) => {\n    let formattedTitle = item.title.toLowerCase()\n    return formattedTitle.indexOf(searchValue) > -1\n  })\n  console.log(\"peliculas buscadas\", searchFilms)\n  dispatch({\n    type: SEARCH_FILMS,\n    payload: searchFilms,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}